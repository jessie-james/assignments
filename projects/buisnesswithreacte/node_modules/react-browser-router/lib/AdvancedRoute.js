"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require("react-router");

var _StateRoute = require("./StateRoute");

var _StateRoute2 = _interopRequireDefault(_StateRoute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_AUTH = function DEFAULT_AUTH() {
    return { verified: true };
};

var infoRedirect = function infoRedirect(redirect, location) {
    var from = "" + location.pathname + location.search;
    var to = (redirect || "").replace(/{\d+}/ig, encodeURIComponent(from));
    return { to: to, from: from };
};

exports.default = function (route) {
    var routes = route.routes;
    var authorize = route.authorize || DEFAULT_AUTH;
    var routeProps = {
        path: route.path,
        exact: route.exact,
        strict: route.strict,
        location: route.location
    };

    // https://reacttraining.com/react-router/web/api/Route/Route-props
    // render props: { match, lacation, history }
    if (route.component) {
        routeProps.render = function (props) {
            return _react2.default.createElement(_StateRoute2.default, {
                authorize: authorize,
                location: props.location,
                component: route.component,
                componentProps: props,
                routes: routes
            });
        };
    } else if (route.render) {
        routeProps.render = function (props) {
            var auth = authorize(props);
            if (!auth.verified) {
                var location = props.location;

                var redirect = infoRedirect(auth.redirect, location);
                return _react2.default.createElement(_reactRouter.Redirect, redirect);
            }
            return route.render(_extends({}, props, { routes: routes }));
        };
    } else if (route.children) {
        routeProps.children = function (props) {
            var auth = authorize(props);
            if (!auth.verified) {
                var location = props.location;

                var redirect = infoRedirect(auth.redirect, location);
                return _react2.default.createElement(_reactRouter.Redirect, redirect);
            }
            return route.children(_extends({}, props, { routes: routes }));
        };
    }

    return _react2.default.createElement(_reactRouter.Route, routeProps);
};