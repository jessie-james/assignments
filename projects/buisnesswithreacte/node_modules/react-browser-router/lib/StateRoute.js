"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require("react-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isPromise = function isPromise(obj) {
    return !!obj && ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function") && typeof obj.then === "function";
};

var infoRedirect = function infoRedirect(redirect, location) {
    var from = "" + location.pathname + location.search;
    var to = (redirect || "").replace(/{\d+}/ig, encodeURIComponent(from));
    return { to: to, from: from };
};

var StateRoute = function (_Component) {
    _inherits(StateRoute, _Component);

    function StateRoute(props, context) {
        _classCallCheck(this, StateRoute);

        var _this = _possibleConstructorReturn(this, (StateRoute.__proto__ || Object.getPrototypeOf(StateRoute)).call(this, props, context));

        _this.updateState = function (state, cb) {
            if (_this.alive) {
                _this.setState(state, cb);
            }
        };

        var authorize = props.authorize,
            componentProps = props.componentProps;

        _this.state = {
            ready: true,
            auth: { verified: true }
        };
        _this.alive = true;

        var authorized = authorize(componentProps);
        if (isPromise(authorized)) {
            _this.state.ready = false;
            authorized.then(function (auth) {
                return _this.updateState({ auth: auth, ready: true });
            }).catch(function () {
                return _this.updateState({ verified: false, ready: true });
            });
        } else {
            _this.state.auth = authorized;
        }
        return _this;
    }

    _createClass(StateRoute, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            var authorize = nextProps.authorize,
                componentProps = nextProps.componentProps,
                location = nextProps.location;

            if (location !== this.props.location) {
                var authorized = authorize(componentProps);
                if (isPromise(authorized)) {
                    var doAuthorize = function doAuthorize() {
                        return authorized.then(function (auth) {
                            return _this2.updateState({ auth: auth, ready: true });
                        }).catch(function () {
                            return _this2.updateState({ verified: false, ready: true });
                        });
                    };
                    this.updateState({ ready: false }, doAuthorize);
                } else {
                    this.updateState({ auth: authorized, ready: true });
                }
            }
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.alive = false;
        }
    }, {
        key: "render",
        value: function render() {
            var _state = this.state,
                auth = _state.auth,
                ready = _state.ready;

            if (!ready) {
                return null;
            }

            var _props = this.props,
                RouteComponent = _props.component,
                componentProps = _props.componentProps,
                routes = _props.routes,
                location = _props.location;

            if (!auth.verified) {
                var redirect = infoRedirect(auth.redirect, location);
                return _react2.default.createElement(_reactRouter.Redirect, redirect);
            }

            return _react2.default.createElement(RouteComponent, _extends({}, componentProps, { routes: routes }));
        }
    }]);

    return StateRoute;
}(_react.Component);

StateRoute.defaultProps = {
    authorize: function authorize() {
        return { verified: true };
    }
};
StateRoute.propTypes = {
    location: _propTypes2.default.object,
    component: _propTypes2.default.any,
    routes: _propTypes2.default.any,
    componentProps: _propTypes2.default.object,
    authorize: _propTypes2.default.func
};
exports.default = StateRoute;